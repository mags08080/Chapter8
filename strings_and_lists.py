# -*- coding: utf-8 -*-
"""strings_and_lists

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/11u95zgGuyTYB-boN1CURH7jknqD8XO5J
"""

## Create a program to check if a string is a palindrome
#get string from user
string = input("Enter a string: ")

#remove spaces and lowercase the string
string = string.replace(" ","").lower()

#create a reversed version of a cleaned string using python's slice notation
reversed_string = string[::-1]

#check if the string is a palindrome
if string == reversed_string:
    print("The string is a palindrome")
else:
    print("The string is not a palindrome")

## Create a program to count the number of vowels in a string
#get string from user
string = input("Enter a string: ")

#create variable for vowels
vowels = 'AEIOUaeiou'

#initialize count
vowel_count = 0

#iterate through string
vowel_count = sum(1 for char in string if char in vowels)

#print
print("The number of vowels in the string is:", vowel_count)

## Create a program that finds the longest word in a sentence
#get sentence from user
sentence = input("Enter a sentence: ")

#split the string into a list of words using split()
sentence_list = sentence.split()

#Use the max() function with key=len to find the word with maximum length
longest_word = max(sentence_list, key=len)

#print
print("The longest word in the sentence is:", longest_word)

## Create a program that finds the max and min numbers in a list
#number list
numbers = [3,5,2,9,6]

#find the max number
max_number = max(numbers)

#find the min number
min_number = min(numbers)

#print
print("Maximum:", max_number)
print("Minimum", min_number)

## Create a program that removes duplicates from a list
#list
items = [1,2,2,3,4,4,5]

#use set(items) to conver list into a set, which automatically removes any duplicate elements
unique_items = set(items)

#use list() to convert set back into list
unique_items = list(unique_items)

#print
print("List with duplicates removed:",unique_items)

## Create a program that finds even and odd numbers in a list
#list
numbers = [3,5,2,9,6]

#use list comprehension to find the even and odd numbers
#use the modulus operator %
even_numbers = [n for n in numbers if n % 2 == 0]
odd_numbers = [n for n in numbers if n % 2 != 0]

#print
print("Even numbers:", even_numbers)
print("Odd numbers:", odd_numbers)

## Create a program that merges two lists, removes duplicates, and sorts the result
#lists
list1 = [1,2,3,4]
list2 = [3,4,5,6]

#combine list1 and list2
unique_list = list1 + list2

#remove duplicates using set()
unique_list = set(unique_list)

#convert back to list
unique_list = list(unique_list)

#sort the list
unique_list = sorted(unique_list)

#print
print("Merged and unique list:", sorted_list)

## Create a program that finds the difference between two lists
#lists
list1= [1,2,3,4]
list2 = [3,4,5,6]

#use set() to conver both lists into sets
list1 = set(list1)
list2 = set(list2)

#use the (-) operator to perform a set difference
difference = list1 - list2

#convert back to list
difference = list(difference)

#print
print("Difference of list1 - list2:", difference)

## Create a program that finds all anagram pairs in a list of words
#list of words
words = ["listen","enlist","hello","world","drowl"]

#the function goes through each possible pair of words using nested loops in the given list and checks if they are anagrams by comparing
#their sorted characters using sorted() method. If they are anagrams, it adds them as a tuple to the anagrams list
def find_anagrams(words):
    #anagrams list
    anagrams = []
    #iterate through each word in the list
    for i in range(len(words)):
        #iterate through each word again
        for j in range(i+1, len(words)):
            #check if the words are anagrams
            if sorted(words[i]) == sorted(words[j]):
                #if they are anagrams add them as a tuple to the anagrams list
                anagrams.append((words[i], words[j]))
    #return the anagrams list
    return anagrams

#print
print("Anagram pairs:", find_anagrams(words))

## Create a program that concatenates a list of strings with a specified separator "-"
#list of strings
strings = ["Hello","world","Python","rocks"]

#concatenate strings with separator "-"
concatenated_string = "-".join(strings)

#print
print("Joined string:", concatenated_string)

## Create a program that removes non-alphabetic characters from a string
#string
input_string = "Hello, World! 123"

#use isalpha() to check if character is an alphabetic letter and also use join() method joins the kept characters that
#uses an empty string "" as the separator, so it connects each character without spaces or any other separator
alphabetic_string = "".join(char for char in input_string if char.isalpha())

#print
print("Alphabetic characters only:", alphabetic_string)